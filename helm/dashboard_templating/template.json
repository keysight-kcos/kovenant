{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": {{ id }},
  "iteration": 1660151413935,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"__x64_sys_read\")\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> filter(fn: (r) => r[\"pod_name\"] =~ /^*$/)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"length\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({r with kilobytes:  float(v: r.length) / 1024.0}))\r\n  |> drop(fn: (column) => column == \"function\")\r\n  |> drop(fn: (column) => column == \"host\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> drop(fn: (column) => column == \"_measurement\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> aggregateWindow(every: 30s, fn: sum, column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: Kilobytes Read by Pod",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(pod_chart=\"(.*)\",).*(pod_name=\"(.*)\",).*)",
            "renamePattern": "$5 chart($3)"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"__x64_sys_write\")\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> filter(fn: (r) => r[\"pod_name\"] =~ /^*$/)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"length\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({r with kilobytes:  float(v: r.length) / 1024.0}))\r\n  |> drop(fn: (column) => column == \"function\")\r\n  |> drop(fn: (column) => column == \"host\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> drop(fn: (column) => column == \"_measurement\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> aggregateWindow(every: 30s, fn: sum, column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: Kilobytes Written by Pod",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(pod_chart=\"(.*)\",).*(pod_name=\"(.*)\",).*)",
            "renamePattern": "$5 chart($3)"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 7,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_recvmsg\")\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> filter(fn: (r) => r[\"pod_name\"] =~ /^*$/)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"length\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({r with kilobytes:  float(v: r.length)   / 1024.0}))\r\n  |> drop(fn: (column) => column == \"function\")\r\n  |> drop(fn: (column) => column == \"host\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> drop(fn: (column) => column == \"_measurement\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> aggregateWindow(every: 30s, fn: sum, column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Kilobytes Received by Pod",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(pod_chart=\"(.*)\",).*(pod_name=\"(.*)\",).*)",
            "renamePattern": "$5 chart($3)"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_sendmsg\")\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> filter(fn: (r) => r[\"pod_name\"] =~ /^*$/)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"length\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({r with kilobytes:  float(v: r.length) / 1024.0}))\r\n  |> drop(fn: (column) => column == \"function\")\r\n  |> drop(fn: (column) => column == \"host\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> drop(fn: (column) => column == \"_measurement\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> aggregateWindow(every: 30s, fn: sum, column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Kilobytes Sent bv Pod",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(pod_chart=\"(.*)\",).*(pod_name=\"(.*)\",).*)",
            "renamePattern": "$5 chart($3)"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 16
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_connect\")\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> filter(fn: (r) => r[\"pod_name\"] =~ /^*$/)\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with connections: 1 }))\r\n  |> drop(fn: (column) => column == \"function\")\r\n  |> drop(fn: (column) => column == \"host\")\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> drop(fn: (column) => column == \"_measurement\")\r\n  |> keep(columns: [\"_time\", \"pod_name\", \"pod_chart\", \"pod_namespace\", \"connections\"])\r\n  |> drop(fn: (column) => column == \"_start\")\r\n  |> drop(fn: (column) => column == \"_stop\")\r\n  |> aggregateWindow(every: 30s, fn: count, column: \"connections\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Connections by Pod",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(pod_chart=\"(.*)\",).*(pod_name=\"(.*)\",).*)",
            "renamePattern": "$5 chart($3)"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 25
      },
      "id": 2,
      "options": {
        "legend": {
          "displayMode": "list",
          "placement": "bottom"
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.3",
      "repeat": "namespace",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_connect\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sock_daddr\" \r\n    or r[\"_field\"] == \"sock_saddr\" or r[\"_field\"] == \"sock_dest_object\" or r[\"_field\"] == \"sock_src_object\"\r\n    or r[\"_field\"] == \"sock_src_chart\"\r\n    or r[\"_field\"] == \"sock_dest_chart\"\r\n    )\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with connections: 1 }))\r\n  |> map(fn: (r) => ({ r with k8s_src: r.sock_src_object}))\r\n  |> map(fn: (r) => ({ r with k8s_dest: r.sock_dest_object}))\r\n  |> map(fn: (r) => ({ r with src: r.sock_saddr}))\r\n  |> map(fn: (r) => ({ r with dest: r.sock_daddr}))\r\n  |> keep(columns: [\"connections\", \"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> group(columns: [\"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> count(column: \"connections\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Connection Count",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(dest=\"(.*)\")(, )(k8s_dest=\"(.*)\")(, )(k8s_src=\"(.*)\")(, )(sock_dest_chart=\"(.*)\")(, )(sock_src_chart=\"(.*)\")(, )(src=\"(.*)\")}$)",
            "renamePattern": "$18 -> $3, $9 chart($15) -> $6 chart($12)"
          }
        }
      ],
      "type": "piechart"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 14,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "table",
          "placement": "bottom",
          "values": [
            "value"
          ]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.3",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_recvmsg\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sock_daddr\" \r\n    or r[\"_field\"] == \"sock_saddr\" or r[\"_field\"] == \"sock_dest_object\" or r[\"_field\"] == \"sock_src_object\"\r\n    or r[\"_field\"] == \"sock_src_chart\"\r\n    or r[\"_field\"] == \"sock_dest_chart\"\r\n    )\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with connections: 1 }))\r\n  |> map(fn: (r) => ({ r with k8s_src: r.sock_src_object}))\r\n  |> map(fn: (r) => ({ r with k8s_dest: r.sock_dest_object}))\r\n  |> map(fn: (r) => ({ r with src: r.sock_saddr}))\r\n  |> map(fn: (r) => ({ r with dest: r.sock_daddr}))\r\n  |> keep(columns: [\"connections\", \"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> group(columns: [\"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> count(column: \"connections\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Receive Count",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(dest=\"(.*)\")(, )(k8s_dest=\"(.*)\")(, )(k8s_src=\"(.*)\")(, )(sock_dest_chart=\"(.*)\")(, )(sock_src_chart=\"(.*)\")(, )(src=\"(.*)\")}$)",
            "renamePattern": "$3 -> $18, $6 chart($12) -> $9 chart($15)"
          }
        }
      ],
      "type": "piechart"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 47
      },
      "id": 10,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "table",
          "placement": "bottom",
          "values": [
            "value"
          ]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.3",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_sendmsg\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sock_daddr\" \r\n    or r[\"_field\"] == \"sock_saddr\" or r[\"_field\"] == \"sock_dest_object\" \r\n    or r[\"_field\"] == \"sock_src_object\"\r\n    or r[\"_field\"] == \"sock_src_chart\"\r\n    or r[\"_field\"] == \"sock_dest_chart\"\r\n    )\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with connections: 1 }))\r\n  |> map(fn: (r) => ({ r with k8s_src: r.sock_src_object}))\r\n  |> map(fn: (r) => ({ r with k8s_dest: r.sock_dest_object}))\r\n  |> map(fn: (r) => ({ r with src: r.sock_saddr}))\r\n  |> map(fn: (r) => ({ r with dest: r.sock_daddr}))\r\n  |> keep(columns: [\"connections\", \"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> group(columns: [\"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> count(column: \"connections\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Send Count",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(dest=\"(.*)\")(, )(k8s_dest=\"(.*)\")(, )(k8s_src=\"(.*)\")(, )(sock_dest_chart=\"(.*)\")(, )(sock_src_chart=\"(.*)\")(, )(src=\"(.*)\")}$)",
            "renamePattern": "$18 -> $3, $9 chart($15) -> $6 chart($12)"
          }
        }
      ],
      "type": "piechart"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 58
      },
      "id": 12,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "table",
          "placement": "bottom",
          "values": [
            "value"
          ]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.3",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_sendmsg\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sock_daddr\" or r[\"_field\"] == \"length\"\r\n    or r[\"_field\"] == \"sock_saddr\" or r[\"_field\"] == \"sock_dest_object\" \r\n    or r[\"_field\"] == \"sock_src_object\"\r\n    or r[\"_field\"] == \"sock_src_chart\"\r\n    or r[\"_field\"] == \"sock_dest_chart\"\r\n    )\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with kilobytes: float(v: r.length) / 1024.}))\r\n  |> map(fn: (r) => ({ r with k8s_src: r.sock_src_object}))\r\n  |> map(fn: (r) => ({ r with k8s_dest: r.sock_dest_object}))\r\n  |> map(fn: (r) => ({ r with src: r.sock_saddr}))\r\n  |> map(fn: (r) => ({ r with dest: r.sock_daddr}))\r\n  |> keep(columns: [\"kilobytes\", \"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> group(columns: [\"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> sum(column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Kilobytes Sent",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(dest=\"(.*)\")(, )(k8s_dest=\"(.*)\")(, )(k8s_src=\"(.*)\")(, )(sock_dest_chart=\"(.*)\")(, )(sock_src_chart=\"(.*)\")(, )(src=\"(.*)\")}$)",
            "renamePattern": "$18 -> $3, $9 chart($15) -> $6 chart($12)"
          }
        }
      ],
      "type": "piechart"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 69
      },
      "id": 15,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "table",
          "placement": "bottom",
          "values": [
            "value"
          ]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.3",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "{{ datasource_type }}",
            "uid": "{{ datasource_uid }}"
          },
          "query": "from(bucket: \"telegraf\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"function\"] == \"tcp_recvmsg\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sock_daddr\" or r[\"_field\"] == \"length\"\r\n    or r[\"_field\"] == \"sock_saddr\" or r[\"_field\"] == \"sock_dest_object\" or r[\"_field\"] == \"sock_src_object\"\r\n    or r[\"_field\"] == \"sock_src_chart\"\r\n    or r[\"_field\"] == \"sock_dest_chart\"\r\n    )\r\n  |> filter(fn: (r) => r[\"pod_namespace\"] == \"$namespace\")\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with kilobytes: float(v: r.length) / (1024. * 1024.)}))\r\n  |> map(fn: (r) => ({ r with k8s_src: r.sock_src_object}))\r\n  |> map(fn: (r) => ({ r with k8s_dest: r.sock_dest_object}))\r\n  |> map(fn: (r) => ({ r with src: r.sock_saddr}))\r\n  |> map(fn: (r) => ({ r with dest: r.sock_daddr}))\r\n  |> keep(columns: [\"kilobytes\", \"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> group(columns: [\"src\", \"k8s_src\", \"dest\", \"k8s_dest\", \"sock_src_chart\", \"sock_dest_chart\"])\r\n  |> sum(column: \"kilobytes\")",
          "refId": "A"
        }
      ],
      "title": "$namespace: TCP Megabytes Received",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(.*(dest=\"(.*)\")(, )(k8s_dest=\"(.*)\")(, )(k8s_src=\"(.*)\")(, )(sock_dest_chart=\"(.*)\")(, )(sock_src_chart=\"(.*)\")(, )(src=\"(.*)\")}$)",
            "renamePattern": "$3 -> $18, $6 chart($12) -> $9 chart($15)"
          }
        }
      ],
      "type": "piechart"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 35,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
		"current": {
			"selected": true,
			"text": "{{ namespaces[0].namespace }}",
			"value": "{{ namespaces[0].namespace }}"
		},
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "namespace",
        "options": [
			{% for n in namespaces %}
				{
					"selected": {{ n.selected }},
					"text": "{{ n.namespace }}",
					"value": "{{ n.namespace }}"
				}{{ ", " if not loop.last else "" }}
			{% endfor -%}
        ],
		"query": "
			{%- for n in namespaces -%}
			{{ n.namespace }}{{ ", \\n" if not loop.last else "," }}
			{%- endfor -%}
		",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "{{ title }}",
  "uid": "{{ uid }}",
  "version": 101,
  "weekStart": ""
}
