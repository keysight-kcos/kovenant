ip_map = from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_field"] == "pod_mapping_ip" or r["_field"] == "pod_mapping_pod_name")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> keep(columns: ["_time", "pod_mapping_ip", "pod_mapping_pod_name"])

getFieldValue = (tables=<-, field) => {
    vals = tables
        |> findColumn(fn: (key) => true, column: "pod_mapping_pod_name")
    
    length = if exists vals then
      length(arr: vals)
    else 0
      
    
    result = if length == 0 then
      "not_found"
    else vals[0]

    return result
}
ip_to_pod_name = (ip) => {
  pod_name = ip_map
    |> filter(fn: (r) => r.pod_mapping_ip == ip)
    |> last(column: "pod_mapping_ip")
    |> getFieldValue(field: "pod_mapping_pod_name")
  return pod_name
}

Map to new columns
|> map(fn: (r) => ({ r with source_pod: ip_to_pod_name(ip: r.process_kprobe_args_0_skb_arg_saddr) }))
|> map(fn: (r) => ({ r with dest_pod: ip_to_pod_name(ip: r.process_kprobe_args_0_skb_arg_daddr) }))

^^ the above works
