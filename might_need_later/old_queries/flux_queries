Saving some queries here in case I lose them.

from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_name"] == "my-testing-kcos-sample-go-app-pod")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_daddr" or r["_field"] == "process_kprobe_args_0_skb_arg_saddr" or r["_field"] == "process_kprobe_args_0_skb_arg_dport" or r["_field"] == "process_kprobe_args_0_skb_arg_sport" or r["_field"] == "process_kprobe_args_0_sock_arg_dport" or r["_field"] == "process_kprobe_args_0_sock_arg_sport")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")

Combines source address and port.
from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_name"] == "my-testing-kcos-sample-go-app-pod")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_saddr" or r["_field"] == "process_kprobe_args_0_skb_arg_sport")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) => ({ r with source: r.process_kprobe_args_0_skb_arg_saddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_sport) }))

Source and destination.
from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_name"] == "my-testing-kcos-sample-go-app-pod")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_saddr" 
    or r["_field"] == "process_kprobe_args_0_skb_arg_sport"
    or r["_field"] == "process_kprobe_args_0_skb_arg_daddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_dport"
    )
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) => ({ r with dest: r.process_kprobe_args_0_skb_arg_daddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_dport) }))
  |> map(fn: (r) => ({ r with source: r.process_kprobe_args_0_skb_arg_saddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_sport) }))

Adding namespace and pod name.
from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_saddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_sport"
    or r["_field"] == "process_kprobe_args_0_skb_arg_daddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_dport"
    )
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) => ({ r with dest: r.process_kprobe_args_0_skb_arg_daddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_dport) }))
  |> map(fn: (r) => ({ r with source: r.process_kprobe_args_0_skb_arg_saddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_sport) }))
  |> map(fn: (r) => ({ r with pod_name: r.process_kprobe_process_pod_name }))
  |> map(fn: (r) => ({ r with namespace: r.process_kprobe_process_pod_namespace }))
  |> drop(fn: (column) => column =~ /^*(port|addr)$/)


Command+args added.
from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_namespace"] == "default")
  |> filter(fn: (r) => r["process_kprobe_function_name"] == "dev_queue_xmit" or r["process_kprobe_function_name"] == "netif_receive_skb")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_len" 
    or r["_field"] == "process_kprobe_args_0_skb_arg_hash"
    or r["_field"] == "process_kprobe_args_0_skb_arg_saddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_sport"
    or r["_field"] == "process_kprobe_args_0_skb_arg_daddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_dport"
    or r["_field"] == "process_kprobe_process_binary"
    or r["_field"] == "process_kprobe_process_arguments"
    )
    
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
    //|> distinct(column: "process_kprobe_args_0_skb_arg_hash")
    |> map(fn: (r) => ({ r with dest: r.process_kprobe_args_0_skb_arg_daddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_dport) }))
    |> map(fn: (r) => ({ r with source: r.process_kprobe_args_0_skb_arg_saddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_sport) }))
    |> map(fn: (r) => ({ r with Cmd: r.process_kprobe_process_binary + " " + string(v: r.process_kprobe_process_arguments) }))
    |> drop(fn: (column) => column =~ /^*(port|addr)$/)
    |> drop(fn: (column) => column =~ /^*(binary|arguments)$/)
    |> drop(fn: (column) => column == "host")



from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_namespace"] == "default")
  |> filter(fn: (r) => r["process_kprobe_function_name"] == "dev_queue_xmit" or r["process_kprobe_function_name"] == "netif_receive_skb")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value") 
  |> group(columns: ["process_kprobe_function_name"])
  |> keep(columns: ["_time", "process_kprobe_function_name", "process_kprobe_args_0_skb_arg_len"])

from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_process_pod_namespace"] == "default")
  |> filter(fn: (r) => r["process_kprobe_function_name"] == "dev_queue_xmit" or r["process_kprobe_function_name"] == "netif_receive_skb")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_0_skb_arg_len"
    or r["_field"] == "process_kprobe_args_0_skb_arg_hash"
    or r["_field"] == "process_kprobe_args_0_skb_arg_saddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_sport"
    or r["_field"] == "process_kprobe_args_0_skb_arg_daddr"
    or r["_field"] == "process_kprobe_args_0_skb_arg_dport"
    or r["_field"] == "process_kprobe_process_binary"
    or r["_field"] == "process_kprobe_process_arguments"
    )
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) => ({ r with dest: r.process_kprobe_args_0_skb_arg_daddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_dport) }))
  |> map(fn: (r) => ({ r with source: r.process_kprobe_args_0_skb_arg_saddr + ":" + string(v: r.process_kprobe_args_0_skb_arg_sport) }))
  |> map(fn: (r) => ({ r with cmd: r.process_kprobe_process_binary + " " + string(v: r.process_kprobe_process_arguments) }))
  |> drop(fn: (column) => column =~ /^*(port|addr)$/)
  |> drop(fn: (column) => column =~ /^*(binary|arguments)$/)
  |> drop(fn: (column) => column == "host")
  |> group(columns: ["_time", "source", "dest", "process_kprobe_function_name", "process_kprobe_process_pod_name", "cmd", "process_kprobe_args_0_skb_arg_hash"])
  |> sum(column: "process_kprobe_args_0_skb_arg_len")
  //|> group(columns: ["process_kprobe_process_pod_name"])
  |> group()

For tracking read/write syscalls.
from(bucket: "telegraf")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["process_kprobe_function_name"] == "__x64_sys_read" or r["process_kprobe_function_name"] == "__x64_sys_write")
  |> filter(fn: (r) => r["_field"] == "process_kprobe_args_1_size_arg"
    or r["_field"] == "process_kprobe_process_binary"
    or r["_field"] == "process_kprobe_process_arguments")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) => ({ r with cmd: r.process_kprobe_process_binary + " " + string(v: r.process_kprobe_process_arguments) }))
  |> map(fn: (r) => ({r with bytes: int(v: r.kprobe_args_1_size_arg)}))
  |> drop(fn: (column) => column =~ /^*(binary|arguments)$/)
  |> drop(fn: (column) => column == "host")
  |> fill(value: "none")
  |> group(columns: ["process_kprobe_function_name", "process_kprobe_process_pod_name", "cmd"])
  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false, column: "bytes")
